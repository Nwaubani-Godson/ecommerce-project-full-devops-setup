services:
  # 1. PostgreSQL Database Service
  db:
    image: postgres:13-alpine
    restart: unless-stopped
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5434:5432"
    networks:
      - ecommerce_net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s


  # 2. User Service
  user-service:
    build:
      context: .
      dockerfile: ./backend/user-service/Dockerfile
    restart: unless-stopped
    env_file:
      - .env
    environment:
      DATABASE_URL: ${DATABASE_URL}
      SECRET_KEY: ${SECRET_KEY}
    ports:
      - "8001:8001"
    networks:
      - ecommerce_net
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 3. Product Service
  product-service:
    build:
      context: .
      dockerfile: ./backend/product-service/Dockerfile
    restart: unless-stopped
    env_file:
      - .env
    environment:
      DATABASE_URL: ${DATABASE_URL}
      SECRET_KEY: ${SECRET_KEY}
    ports:
      - "8002:8002"
    networks:
      - ecommerce_net
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 4. Cart Service
  cart-service:
    build:
      context: .
      dockerfile: ./backend/cart-service/Dockerfile
    restart: unless-stopped
    env_file:
      - .env
    environment:
      DATABASE_URL: ${DATABASE_URL}
      SECRET_KEY: ${SECRET_KEY}
    ports:
      - "8003:8003"
    networks:
      - ecommerce_net
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 5. Order Service
  order-service:
    build:
      context: .
      dockerfile: ./backend/order-service/Dockerfile
    restart: unless-stopped
    env_file:
      - .env
    environment:
      DATABASE_URL: ${DATABASE_URL}
      SECRET_KEY: ${SECRET_KEY}
    ports:
      - "8004:8004"
    networks:
      - ecommerce_net
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 6. React Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3001:80"
    depends_on:
      nginx-proxy:
        condition: service_started
    restart: unless-stopped
    networks:
      - ecommerce_net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 7. Nginx Proxy / API Gateway
  nginx-proxy:
    build:
      context: ./backend/nginx-proxy
    ports:
      - "8000:80"
    depends_on:
      user-service:
        condition: service_healthy
      product-service:
        condition: service_healthy
      cart-service:
        condition: service_healthy
      order-service:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - ecommerce_net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 8. Nginx Exporter for Prometheus
  # This service collects metrics from Nginx and exposes them for Prometheus
  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:1.2.0 
    ports:
      - "9113:9113" 
    networks:
      - ecommerce_net
    depends_on:
      - nginx-proxy
    command:
      - '-nginx.scrape-uri=http://nginx-proxy/nginx_status' # Tell exporter where to find Nginx status


  # 9. Prometheus Monitoring Service
  prometheus:
    image: prom/prometheus:v2.47.2
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - "9090:9090"
    networks:
      - ecommerce_net

  # 10. Grafana Monitoring Dashboard
  grafana:
    image: grafana/grafana:10.2.2
    ports:
      - "3000:3000"
    networks:
      - ecommerce_net
    depends_on:
      - prometheus
    volumes:
      - grafana_data:/var/lib/grafana


volumes:
  db_data:
  grafana_data:

networks:
  ecommerce_net:
    driver: bridge

