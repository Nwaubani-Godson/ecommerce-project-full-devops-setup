name: ecommerce CI/CD Pipeline

on:
  push:
    branches:
      - main 

jobs:
  build-and-test:
    runs-on: ubuntu-latest 

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js for Frontend
        uses: actions/setup-node@v4
        with:
          node-version: '20' 

      - name: Cache Frontend Node Modules
        id: cache-node-modules
        uses: actions/cache@v4
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Frontend Dependencies
        working-directory: ./frontend
        run: npm ci 

      - name: Run Frontend Tests (Vitest) 
        working-directory: ./frontend
        run: npm test 

      - name: Set up Python for Backend
        uses: actions/setup-python@v5
        with:
          python-version: '3.10' 
          cache: 'pip' 

      - name: Create .env file for docker-compose
        run: |
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" > .env
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
          echo "DATABASE_URL=postgresql+asyncpg://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@db:5432/${{ secrets.POSTGRES_DB }}" >> .env
          
          # Debug: show .env file contents (secrets will be masked)
          echo "--- .env file contents ---"
          cat .env

      - name: Install Backend Python Dependencies (for each service)
        run: |
          pip install -r backend/user-service/requirements.txt
          pip install -r backend/product-service/requirements.txt
          pip install -r backend/cart-service/requirements.txt
          pip install -r backend/order-service/requirements.txt

      - name: Give execute permission for test.sh
        run: chmod +x ./test.sh

      - name: Run Backend Tests with Docker Compose
        env:
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
        run: ./test.sh

  build-and-push-images:
    needs: build-and-test 
    runs-on: ubuntu-latest 

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Debug: Check project structure before building
      - name: Debug - Check Project Structure
        run: |
          echo "=== PROJECT STRUCTURE DEBUG ==="
          echo "Root directory contents:"
          ls -la
          echo ""
          echo "Backend directory contents:"
          ls -la backend/ 2>/dev/null || echo "backend/ directory not found"
          echo ""
          echo "Backend services structure:"
          for service in user-service product-service cart-service order-service nginx-proxy; do
            echo "--- $service ---"
            if [ -d "backend/$service" ]; then
              ls -la backend/$service/
              echo "Dockerfile exists: $([ -f "backend/$service/Dockerfile" ] && echo "YES" || echo "NO")"
            else
              echo "backend/$service directory does not exist"
            fi
            echo ""
          done
          echo ""
          echo "Frontend directory contents:"
          ls -la frontend/ 2>/dev/null || echo "frontend/ directory not found"
          echo ""
          echo "Checking for shared directory:"
          ls -la backend/shared/ 2>/dev/null || echo "backend/shared/ does not exist"

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3 

      - name: Build and Push Frontend Docker Image 
        uses: docker/build-push-action@v5
        with:
          context: ./frontend 
          push: true 
          tags: ${{ secrets.DOCKER_USERNAME }}/ecommerce-app-frontend:latest
          file: ./frontend/Dockerfile 

      - name: Debug - User Service Structure
        run: |
          echo "=== USER SERVICE DEBUG ==="
          echo "User service directory contents:"
          ls -la backend/user-service/ 2>/dev/null || echo "backend/user-service/ not found"

      - name: Build and Push User Service Docker Image 
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/ecommerce-app-user-service:latest
          file: ./backend/user-service/Dockerfile

      - name: Debug - Product Service Structure
        run: |
          echo "=== PRODUCT SERVICE DEBUG ==="
          echo "Product service directory contents:"
          ls -la backend/product-service/ 2>/dev/null || echo "backend/product-service/ not found"

      - name: Build and Push Product Service Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/ecommerce-app-product-service:latest
          file: ./backend/product-service/Dockerfile

      - name: Debug - Cart Service Structure
        run: |
          echo "=== CART SERVICE DEBUG ==="
          echo "Cart service directory contents:"
          ls -la backend/cart-service/ 2>/dev/null || echo "backend/cart-service/ not found"

      - name: Build and Push Cart Service Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/ecommerce-app-cart-service:latest
          file: ./backend/cart-service/Dockerfile

      - name: Debug - Order Service Structure
        run: |
          echo "=== ORDER SERVICE DEBUG ==="
          echo "Order service directory contents:"
          ls -la backend/order-service/ 2>/dev/null || echo "backend/order-service/ not found"

      - name: Build and Push Order Service Docker Image 
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/ecommerce-app-order-service:latest
          file: ./backend/order-service/Dockerfile

      - name: Debug - Nginx Proxy Structure
        run: |
          echo "=== NGINX PROXY DEBUG ==="
          echo "Nginx proxy directory contents:"
          ls -la backend/nginx-proxy/ 2>/dev/null || echo "backend/nginx-proxy/ not found"

      - name: Build and Push Nginx Proxy Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./backend/nginx-proxy/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/ecommerce-app-nginx-proxy:latest
          # file: ./backend/nginx-proxy/Dockerfile

  simulate-deploy: 
    needs: build-and-push-images 
    runs-on: ubuntu-latest 

    steps:
      - name: Deploy Simulation
        run: |
          echo "Simulating deployment of the ecommerce application..."
          echo "Deployment simulation complete!"