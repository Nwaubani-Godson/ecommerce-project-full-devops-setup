name: ecommerce CI/CD Pipeline

on:
  push:
    branches:
      - main 

jobs:
  build-and-test:
    runs-on: ubuntu-latest 

    services:
      db:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        options: >-
          --health-cmd pg_isready
          --health-interval 5s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      
      - name: Set up Node.js for Frontend
        uses: actions/setup-node@v4
        with:
          node-version: '20' 

      - name: Cache Frontend Node Modules
        id: cache-node-modules
        uses: actions/cache@v4
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Frontend Dependencies
        working-directory: ./frontend
        run: npm ci 

      - name: Run Frontend Tests (Vitest) 
        working-directory: ./frontend
        run: npm test 

      
      - name: Set up Python for Backend
        uses: actions/setup-python@v5
        with:
          python-version: '3.10' 
          cache: 'pip' 

      - name: Prepare Backend Environment (.env for tests)
        run: |
          # Create a .env file at the root for the backend test runner
          # This points to the 'db' service provided by GitHub Actions
          echo "DATABASE_URL=postgresql+asyncpg://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@db:5432/${{ secrets.POSTGRES_DB }}" > .env
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env 

      - name: Install Backend Python Dependencies (for each service)
        run: |
          pip install -r backend/user-service/requirements.txt
          pip install -r backend/product-service/requirements.txt
          pip install -r backend/cart-service/requirements.txt
          pip install -r backend/order-service/requirements.txt

      - name: Give execute permission for test.sh
        run: chmod +x ./test.sh

      - name: Run Backend Tests (Pytest) 
        run: ./test.sh 


  build-and-push-images:
    needs: build-and-test 
    runs-on: ubuntu-latest 

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3 

     
      - name: Build and Push Frontend Docker Image 
        uses: docker/build-push-action@v5
        with:
          context: ./frontend 
          push: true 
          tags: ${{ secrets.DOCKER_USERNAME }}/ecommerce-app-frontend:latest
          file: ./frontend/Dockerfile 

      
      - name: Build and Push User Service Docker Image 
        uses: docker/build-push-action@v5
        with:
          context: ./backend/user-service
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/ecommerce-app-user-service:latest
          file: ./backend/user-service/Dockerfile

      - name: Build and Push Product Service Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./backend/product-service
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/ecommerce-app-product-service:latest
          file: ./backend/product-service/Dockerfile

      - name: Build and Push Cart Service Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./backend/cart-service
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/ecommerce-app-cart-service:latest
          file: ./backend/cart-service/Dockerfile

      - name: Build and Push Order Service Docker Image 
        uses: docker/build-push-action@v5
        with:
          context: ./backend/order-service
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/ecommerce-app-order-service:latest
          file: ./backend/order-service/Dockerfile

      
      - name: Build and Push Nginx Proxy Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./backend/nginx-proxy 
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/ecommerce-app-nginx-proxy:latest
          file: ./backend/nginx-proxy/Dockerfile 



  simulate-deploy: 
    needs: build-and-push-images 
    runs-on: ubuntu-latest 

    steps:
      - name: Deploy Simulation
        run: |
          echo "Simulating deployment of the eCommerce application..."
          echo "Deployment simulation complete!"