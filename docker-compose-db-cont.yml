services:
  # 1. PostgreSQL Database Service
  db:
    image: postgres:13-alpine
    restart: unless-stopped
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - db_data:/var/lib/postgresql/data
      # - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - ecommerce_net

  # 2. User Service
  user-service:
    build:
      context: .
      dockerfile: ./backend/user-service/Dockerfile
    restart: unless-stopped
    env_file:
      - .env
    environment:
      DATABASE_URL: ${DATABASE_URL}
      SECRET_KEY: ${SECRET_KEY}
    expose:
      - "8000"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - ecommerce_net
    

  # 3. Product Service
  product-service:
    build:
      context: .
      dockerfile: ./backend/product-service/Dockerfile
    restart: unless-stopped
    env_file:
      - .env
    environment:
      DATABASE_URL: ${DATABASE_URL}
      SECRET_KEY: ${SECRET_KEY}
    expose:
      - "8000"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - ecommerce_net

  # 4. Cart Service
  cart-service:
    build:
      context: .
      dockerfile: ./backend/cart-service/Dockerfile
    restart: unless-stopped
    env_file:
      - .env
    environment:
      DATABASE_URL: ${DATABASE_URL}
      SECRET_KEY: ${SECRET_KEY}
    expose:
      - "8000"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - ecommerce_net

  # 5. Order Service
  order-service:
    build:
      context: .
      dockerfile: ./backend/order-service/Dockerfile
    restart: unless-stopped
    env_file:
      - .env
    environment:
      DATABASE_URL: ${DATABASE_URL}
      SECRET_KEY: ${SECRET_KEY}
    expose:
      - "8000"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - ecommerce_net


  # 6. React Frontend Application
  frontend:
    build:
      context: ./frontend # Build context is your frontend directory
      dockerfile: Dockerfile # Refers to frontend/Dockerfile
    ports:
      - "3000:80" # Map host port 3000 to container port 80 (where Nginx serves the React app)
    depends_on:
      # The frontend primarily needs the API Gateway (nginx-proxy) to be available
      nginx-proxy:
        condition: service_started
    restart: unless-stopped
    networks:
      - ecommerce_net

  # 7. Nginx Proxy / API Gateway (Updated with CORS and /register, as discussed)
  nginx-proxy:
    build:
      context: ./backend/nginx-proxy
    ports:
      # This mapping for the API Gateway remains critical.
      # Host port 8000 maps to Nginx's internal port 80 (where it listens for API calls)
      - "8000:80"
      # - "443:443" # Uncomment and configure Nginx for HTTPS if needed
    depends_on:
      user-service:
        condition: service_started
      product-service:
        condition: service_started
      cart-service:
        condition: service_started
      order-service:
        condition: service_started
    restart: unless-stopped
    networks:
      - ecommerce_net

volumes:
  db_data:

networks:
  ecommerce_net:
    driver: bridge
